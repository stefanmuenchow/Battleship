{
  "name": "node-flux",
  "version": "0.3.0",
  "description": "Node.js port of Flux http://github.com/selvinortiz/flux",
  "main": "./lib/flux.js",
  "scripts": {
    "test": "mocha --require should --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jbrooksuk/node-flux.git"
  },
  "keywords": [
    "flux",
    "regex",
    "builder",
    "regular",
    "expressions"
  ],
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "author": {
    "name": "James Brooks",
    "email": "jbrooksuk@me.com"
  },
  "readmeFilename": "README.md",
  "readme": "# FLUX (Fluent Regular Expressions)\nnode-flux is a Node.js port of [Selvin Ortiz' Flux.php](http://github.com/selvinortiz/flux)\n\nCurrently node-flux is Node.js compatible as it makes use of the `util` library. I'm looking to change this in the near future to be usable in the browser and on the server.\n\nFlux opens up a new world when writing regular expressions. Using powerful method names, you can build reliable and consistent regular expressions. For example\n\n```js\nvar Flux = require('flux');\nvar socialTest = new Flux(); // Let's create a new Flux object for a test\nsocialTest.startOfLine().either('Twitter', 'Facebook', 'Google+').ignoreCase().endOfLine();\nvar testString = 'Path';\nif(socialTest.match(testString)) {\n\tconsole.log('Get out of here Path!');\n}else{\n\tconsole.log('No match!');\n}\n```\n\n# Examples\nExamples are provided in the `/examples` directory. You can test them with `node examples/usdate.js` or `node examples/usphone.js`\n\nMore examples will be added as the syntax evolves or changes.\n\n# Changelog\n\n## 0.3.0\n- Added `getSegments()`\n- Added `removeSegment()`\n- Added `lineBreak()` and `br()` to match new lines (DOS/Unix)\n- Added `clear()` to empty the current pattern and modifiers\n- Added `getPattern()` which is an alias to compile\n- Fixes mixed logic between `add()` and `raw()`\n- Fixes implementation on `orTry()`\n- Updated the test pattern used\n\n## 0.2.1\n- Improved README to demo the power of Flux.\n\n## 0.2.0\n- Added `addSeed()`, `removeSeed()`\n- Seeds can be passed through as final arguments in `match()` and `replace()`\n- Added `toString()` which will compile your pattern with modifiers\n- Added new tests\n- Added `getSegment()`. When passed an integer will return that position in the pattern. Default is `0`.\n\n## 0.1.0\n- Changed version to minor version 1 as the syntax is working and passes all examples used by the the [Flux.php](http://github.com/selvinortiz/flux)\n\n## 0.0.4\n- Added `global()` modifier (g)\n- Added new test for `global()` modifier\n\n## 0.0.3\n- Added examples `usdate.js` and `usphone.js`\n- Commented code a little\n\n## 0.0.2\n- Adds the `letters()` method\n- Renamed `numbers()` to `digits()`\n- Adds support for quantifiers in `digits()`\n- Adds `ignoreCase()` as an alias for `inAnyCase()`\n\n# License\nMIT - [http://jbrooksuk.mit-license.org](http://jbrooksuk.mit-license.org)",
  "_id": "node-flux@0.3.0",
  "_from": "node-flux@"
}
